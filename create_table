-- Create the database if it doesn't exist
CREATE DATABASE IF NOT EXISTS EcommerceDB;
USE EcommerceDB;

-- User table@@@
CREATE TABLE User (
    userID INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL UNIQUE,
    createdDate DATETIME NOT NULL,
    lastLogin DATETIME NOT NULL,
    street VARCHAR(255) NOT NULL,
    block VARCHAR(50),
    unit VARCHAR(50) NOT NULL,
    postalCode VARCHAR(10) NOT NULL,
    password VARCHAR(255) NOT NULL
);

-- Category table@@@
CREATE TABLE Category (
    categoryID INT PRIMARY KEY AUTO_INCREMENT,
    productID VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL UNIQUE,
    FOREIGN KEY (productID) REFERENCES Product(productID)
);

-- Product table@@@
CREATE TABLE Product (
    productID INT PRIMARY KEY AUTO_INCREMENT,
    categoryID INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    price DOUBLE NOT NULL,
    stockQuantity INT NOT NULL,
    image VARCHAR(255) NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    createdAt DATETIME NOT NULL,
    updatedAt DATETIME NOT NULL,
    FOREIGN KEY (categoryID) REFERENCES Category(categoryID)
);

-- Payment table@@@
CREATE TABLE Payment (
    paymentID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT,
    paymentMethod VARCHAR(255) NOT NULL,
    transactionID VARCHAR(255) UNIQUE,
    amount DOUBLE NOT NULL,
    status VARCHAR(255) NOT NULL,
    paymentDate DATETIME NOT NULL,
    FOREIGN KEY (userID) REFERENCES User(userID)
);

-- User Order table@@@
CREATE TABLE UserOrder (
    userOrderID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    addressID INT NOT NULL,
    paymentID INT NOT NULL,
    orderDate DATETIME NOT NULL,
    status VARCHAR(255) NOT NULL,
    grossAmount DOUBLE NOT NULL,
    shippingAmount DOUBLE NOT NULL,
    GST DOUBLE NOT NULL,
    FOREIGN KEY (userID) REFERENCES User(userID),
    FOREIGN KEY (addressID) REFERENCES Address(addressID),
    FOREIGN KEY (paymentID) REFERENCES Payment(paymentID)
);

-- Order Item table@@@
CREATE TABLE OrderItem (
    orderItemID INT PRIMARY KEY AUTO_INCREMENT,
    orderID INT NOT NULL,
    productID INT NOT NULL,
    quantity INT NOT NULL,
    unitPrice DOUBLE NOT NULL,
    FOREIGN KEY (orderID) REFERENCES UserOrder(userOrderID),
    FOREIGN KEY (productID) REFERENCES Product(productID)
);

-- Cart table@@@
CREATE TABLE Carts (
    cartID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT,
    createdAt DATETIME NOT NULL,
    updatedAt DATETIME NOT NULL,
    FOREIGN KEY (userID) REFERENCES User(userID)
);

-- Cart Item table
CREATE TABLE CartItem (
    cartItemID INT PRIMARY KEY AUTO_INCREMENT,
    cartID INT,
    productID INT,
    quantity INT NOT NULL,
    unitPrice DOUBLE NOT NULL,
    FOREIGN KEY (cartID) REFERENCES Carts(cartID),
    FOREIGN KEY (productID) REFERENCES Product(productID)
);

-- Voucher table
CREATE TABLE Voucher (
    voucherID INT PRIMARY KEY AUTO_INCREMENT,
    code VARCHAR(255) NOT NULL UNIQUE,
    discountPercent DOUBLE NOT NULL,
    minOrderValue DOUBLE NOT NULL,
    validFrom DATETIME NOT NULL,
    validTo DATETIME NOT NULL,
    usageLimit INT NOT NULL,
    currentLimit INT NOT NULL
);

-- User Order Voucher table (vouchers used in orders)
CREATE TABLE UserOrderVoucher (
    userOrderVoucherID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT,
    voucherID INT,
    userOrderID INT,
    isUsed BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (userID) REFERENCES User(userID),
    FOREIGN KEY (voucherID) REFERENCES Voucher(voucherID),
    FOREIGN KEY (userOrderID) REFERENCES UserOrder(userOrderID)
);

-- Review table
CREATE TABLE Review (
    reviewID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT,
    productID INT,
    orderID INT,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    comment VARCHAR(255),
    createAt DATETIME NOT NULL,
    image VARCHAR(255),
    FOREIGN KEY (userID) REFERENCES User(userID),
    FOREIGN KEY (productID) REFERENCES Product(productID),
    FOREIGN KEY (orderID) REFERENCES UserOrder(userOrderID)
);

--LoginHistory Table
CREATE TABLE LoginHistory (
    loginHistoryID INT AUTO_INCREMENT,
    userID INT,
    loginTime DATETIME NOT NULL,
    LogoutTime DATETIME,
    ipAddress VARCHAR(45) NOT NULL,
    PRIMARY KEY (loginHistoryID),
    FOREIGN KEY (userID) REFERENCES User(userID),
    CHECK (logoutTime IS NULL OR logoutTime > loginTime)
);

--SessionToken Table
CREATE TABLE SessionToken (
    sessionTokenID INT AUTO_INCREMENT,
    userID INT,
    token VARCHAR(255) UNIQUE NOT NULL,
    expiryTime DATETIME NOT NULL,
    issuedAt DATETIME NOT NULL,
    PRIMARY KEY (sessionTokenID),
    FOREIGN KEY (userID) REFERENCES User(userID),
    CHECK (expiryTime > issuedAt)
);
