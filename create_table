-- Create the database if it doesn't exist
CREATE DATABASE IF NOT EXISTS EcommerceDB;
USE EcommerceDB;

-- User table
CREATE TABLE user (
    userId INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL UNIQUE,
    createdDate DATETIME NOT NULL,
    lastLogin DATETIME,
    street VARCHAR(255) NOT NULL,
    block VARCHAR(50),
    unit VARCHAR(50),
    postalCode VARCHAR(10) NOT NULL,
    passwordHash VARCHAR(255) NOT NULL
);

-- Category table
CREATE TABLE category (
    categoryId INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL UNIQUE
);

-- Product table
CREATE TABLE product (
    productId INT PRIMARY KEY AUTO_INCREMENT,
    categoryId INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    stockQuantity INT NOT NULL,
    image VARCHAR(255) NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    createdAt DATETIME NOT NULL,
    updatedAt DATETIME NOT NULL,
    FOREIGN KEY (categoryId) REFERENCES category(categoryId)
);

-- Payment table
CREATE TABLE payment (
    paymentId INT PRIMARY KEY AUTO_INCREMENT,
    userId INT,
    paymentMethod VARCHAR(255) NOT NULL,
    transactionId VARCHAR(255) UNIQUE,
    amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(255) NOT NULL,
    paymentDate DATETIME NOT NULL,
    FOREIGN KEY (userId) REFERENCES user(userId)
);

-- User order table
CREATE TABLE userOrder (
    userOrderId INT PRIMARY KEY AUTO_INCREMENT,
    userId INT NOT NULL,
    paymentId INT NOT NULL,
    orderDate DATETIME NOT NULL,
    status VARCHAR(255) NOT NULL,
    grossAmount DECIMAL(10,2) NOT NULL,
    shippingAmount DECIMAL(10,2) NOT NULL,
    gst DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (userId) REFERENCES user(userId),
    FOREIGN KEY (paymentId) REFERENCES payment(paymentId)
);

-- Order item table
CREATE TABLE orderItem (
    orderItemId INT PRIMARY KEY AUTO_INCREMENT,
    orderId INT NOT NULL,
    productId INT NOT NULL,
    quantity INT NOT NULL,
    unitPrice DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (orderId) REFERENCES userOrder(userOrderId),
    FOREIGN KEY (productId) REFERENCES product(productId)
);

-- Cart table
CREATE TABLE cart (
    cartId INT PRIMARY KEY AUTO_INCREMENT,
    userId INT,
    createdAt DATETIME NOT NULL,
    updatedAt DATETIME NOT NULL,
    FOREIGN KEY (userId) REFERENCES user(userId)
);

-- Cart item table
CREATE TABLE cartItem (
    cartItemId INT PRIMARY KEY AUTO_INCREMENT,
    cartId INT,
    productId INT,
    quantity INT NOT NULL,
    unitPrice DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cartId) REFERENCES cart(cartId),
    FOREIGN KEY (productId) REFERENCES product(productId)
);

-- Voucher table
CREATE TABLE voucher (
    voucherId INT PRIMARY KEY AUTO_INCREMENT,
    code VARCHAR(255) NOT NULL UNIQUE,
    discountPercent DECIMAL(5,2) NOT NULL,
    minOrderValue DECIMAL(10,2) NOT NULL,
    validFrom DATETIME NOT NULL,
    validTo DATETIME NOT NULL,
    usageLimit INT NOT NULL,
    currentLimit INT NOT NULL,
    usedCount INT NOT NULL DEFAULT 0
);

-- User order voucher table
CREATE TABLE userOrderVoucher (
    userOrderVoucherId INT PRIMARY KEY AUTO_INCREMENT,
    userId INT,
    voucherId INT,
    userOrderId INT,
    isUsed BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (userId) REFERENCES user(userId),
    FOREIGN KEY (voucherId) REFERENCES voucher(voucherId),
    FOREIGN KEY (userOrderId) REFERENCES userOrder(userOrderId),
    UNIQUE (userId, voucherId, userOrderId)
);

-- Review table
CREATE TABLE review (
    reviewId INT PRIMARY KEY AUTO_INCREMENT,
    userId INT,
    productId INT,
    orderId INT,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    comment VARCHAR(255),
    createdAt DATETIME NOT NULL,
    image VARCHAR(255),
    FOREIGN KEY (userId) REFERENCES user(userId),
    FOREIGN KEY (productId) REFERENCES product(productId),
    FOREIGN KEY (orderId) REFERENCES userOrder(userOrderId)
);

-- Login history table
CREATE TABLE loginHistory (
    loginHistoryId INT PRIMARY KEY AUTO_INCREMENT,
    userId INT,
    loginTime DATETIME NOT NULL,
    logoutTime DATETIME,
    ipAddress VARCHAR(45) NOT NULL,
    FOREIGN KEY (userId) REFERENCES user(userId),
    CHECK (logoutTime IS NULL OR logoutTime > loginTime)
);

-- Session token table
CREATE TABLE sessionToken (
    sessionTokenId INT PRIMARY KEY AUTO_INCREMENT,
    userId INT,
    token VARCHAR(255) UNIQUE NOT NULL,
    expiryTime DATETIME NOT NULL,
    issuedAt DATETIME NOT NULL,
    FOREIGN KEY (userId) REFERENCES user(userId),
    CHECK (expiryTime > issuedAt)
);
